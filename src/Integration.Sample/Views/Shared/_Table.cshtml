@using Integration.Sample.Attributes;
@using Integration.Sample.Models.Common
@using System.Reflection;
@model ISearchResponseModel<object>

@if (Model.Items != null && Model.Items.Any())
{
    var underlyingType = Model
        .GetType()
        .GetGenericArguments()
        .First();

    IEnumerable<PropertyInfo> properties = underlyingType
        .GetProperties();

    var links = properties
        .Select(property => (Attribute: property.GetCustomAttribute<TablePropertyLinkAttribute>(), Property: property))
        .Where(tuple => tuple.Attribute != null)
        .ToList();

    var displayProperties = properties
        .Where(property => property.GetCustomAttribute<TableIgnoreAttribute>() == null)
        .ToList();

    if (displayProperties != null && displayProperties.Any())
    {
        <table class="table table-striped table-bordered" cellspacing="0" width="100%">
            <thead>
                <tr>
                    @foreach (var property in displayProperties)
                    {
                        <th class="th-sm">
                            @property.GetDisplayName()
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.Items)
                {
                    <tr>
                        @foreach (var property in displayProperties)
                        {
                            var value = property.GetValue(item);
                            string text = value switch
                            {
                                DateTime dateTime => dateTime.ToString("dd/MM/yyyy"),
                                _ => value?.ToString()
                            };

                            <td class="align-middle">
                                @if (!string.IsNullOrWhiteSpace(text))
                                {
                                    var tuple = links?
                                        .FirstOrDefault(tuple => tuple.Attribute.PropertyName == property.Name);

                                    if (tuple.HasValue && tuple.Value.Property != null)
                                    {
                                        <a href="@(tuple.Value.Property.GetValue(item))">
                                            @text
                                        </a>
                                    }
                                    else
                                    {
                                        <text>@text</text>
                                    }
                                }
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <partial name="_Pagination" model="Model" />
    }
    else
    {
        <p>Ran into issue's rendering table</p>
    }
}
else
{
    <p>No results found</p>
}